package org.streaming.job;

import org.apache.flink.streaming.api.functions.source.legacy.SourceFunction;

import java.util.UUID;
/**
 * This is a mock for the flash sale events. This class intends to mock the behavior
 * of a streaming source of data. Ideally, this is data that is generated by a ecommerce
 * platform and stored in a queue such as a Kafka or an Eventhub.
 */
public class FlashSaleEventSource implements SourceFunction<FlashSaleEvent> {

    //Flag to indicate the running status of the stream generator.
    private boolean running = true;

    /**
     * To mock the streaming, this method generates random data, following the structure of the
     * object FlashSaleEvent. To allow compatibility with an ApacheFlink Source, this uses an
     * Context interface and the collect method.
     *
     * @param ctx SourceContext used to stream elements to the flink pipeline.
     */
    @Override
    public void run(SourceContext<FlashSaleEvent> ctx) throws Exception {
        while (running) {
            FlashSaleEvent event = new FlashSaleEvent(
                    UUID.randomUUID().toString(),
                    "2024-04-05T12:05:" + String.format("%02d", System.currentTimeMillis() % 60) + ".979Z", // Mocked Event Timestamp
                    "2024-04-05T12:06:" + String.format("%02d", (System.currentTimeMillis() + 1) % 60) + ".262Z",
                    UUID.randomUUID().toString(),
                    "OR" + String.format("%010d", (int) (Math.random() * 1000000000L)),
                    false,
                    "700000000" + (int) (Math.random() * 1000),
                    (int) (Math.random() * 5 + 1),
                    Math.random() * 1000,
                    Math.random() * 100,
                    "FS" + String.format("%010d", (int) (Math.random() * 1000000000L)),
                    "GOA" + (int) (Math.random() * 5 + 1)
            );

            ctx.collect(event);

            // This ensures that the data generated is not in a very high throughput.
            Thread.sleep(1000);
        }
    }
    /**
     * Set the flag to false in case we want to stop the streaming.
     */
    @Override
    public void cancel() {
        running = false;
    }
}
